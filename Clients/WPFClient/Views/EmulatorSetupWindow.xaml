<simpleChildWindow:ChildWindow
    x:Class="WPFClient.Views.EmulatorSetupWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:IconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:behaviors="clr-namespace:WPFClient.Behaviors"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:local="clr-namespace:WPFClient.Converters"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:simpleChildWindow="clr-namespace:MahApps.Metro.SimpleChildWindow;assembly=MahApps.Metro.SimpleChildWindow"
    Title="Emulator Setup"
    BorderBrush="{DynamicResource MahApps.Brushes.Accent}"
    BorderThickness="1"
    ChildWindowMinHeight="300"
    ChildWindowMinWidth="500"
    CloseButtonCommand="{Binding DataContext.OnCloseCommand, RelativeSource={RelativeSource Self}}"
    CloseButtonCommandParameter="{Binding Mode=OneWay, RelativeSource={RelativeSource Self}}"
    IsOpen="True"
    ShowCloseButton="True"
    mc:Ignorable="d">
    <simpleChildWindow:ChildWindow.Resources>
        <Style x:Key="SlideInAnimationStyle" TargetType="TextBlock">
            <Style.Triggers>
                <EventTrigger RoutedEvent="Loaded">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                AccelerationRatio="0.2"
                                DecelerationRatio="0.8"
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                                From="-100"
                                To="0"
                                Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
            <Setter Property="Margin" Value="{StaticResource SmallLeftTopRightBottomMargin}" />
        </Style>
        <local:InverseBooleanConverter x:Key="InverseBooleanConverter" />
    </simpleChildWindow:ChildWindow.Resources>
    <Grid>
        <Grid>
            <Grid.Resources>
                <local:InverseBooleanConverter x:Key="InverseBooleanConverter" />
                <Style TargetType="{x:Type TextBox}">
                    <Setter Property="Margin" Value="0,0,0,10" />
                    <Setter Property="Padding" Value="10" />
                    <Setter Property="MinWidth" Value="150" />
                    <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                    <Setter Property="BorderThickness" Value="2" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                    <Setter Property="CaretBrush" Value="{DynamicResource AccentColorBrush}" />
                    <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}" />
                    <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
                    <Setter Property="SelectionBrush" Value="{DynamicResource AccentColorBrush}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TextBox}">
                                <Border
                                    Padding="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                    <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" Value="0.4" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush2}" />
                                    </Trigger>
                                    <Trigger Property="IsFocused" Value="True">
                                        <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                                    </Trigger>
                                    <Trigger Property="Validation.HasError" Value="True">
                                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style x:Key="CustomNumericUpDownStyle" TargetType="{x:Type Controls:NumericUpDown}">
                    <Setter Property="Height" Value="40" />
                    <Setter Property="UpDownButtonsWidth" Value="40" />
                    <Setter Property="Margin" Value="{StaticResource SmallLeftTopRightBottomMargin}" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="Width" Value="135" />
                    <Setter Property="FontSize" Value="16" />
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="IsEnabled" Value="{Binding IsStarting, Converter={StaticResource InverseBooleanConverter}}" />
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush2}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <TextBlock
                Grid.Row="0"
                Grid.Column="0"
                FontWeight="Bold"
                Style="{StaticResource SlideInAnimationStyle}"
                Text="Number of servers:" />
            <Controls:NumericUpDown
                Grid.Row="0"
                Grid.Column="1"
                Maximum="20"
                Minimum="1"
                Style="{StaticResource CustomNumericUpDownStyle}"
                Value="{Binding NumberOfServers, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, ValidatesOnExceptions=True}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="0"
                FontWeight="Bold"
                Style="{StaticResource SlideInAnimationStyle}"
                Text="Number of games:" />
            <Controls:NumericUpDown
                Grid.Row="1"
                Grid.Column="1"
                Minimum="1"
                Style="{StaticResource CustomNumericUpDownStyle}"
                Value="{Binding NumberOfGames, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, ValidatesOnExceptions=True}" />
            <TextBlock
                Grid.Row="2"
                Grid.Column="0"
                FontWeight="Bold"
                Style="{StaticResource SlideInAnimationStyle}"
                Text="Start date:" />
            <Controls:DateTimePicker
                Grid.Row="2"
                Grid.Column="1"
                Height="40"
                Margin="{StaticResource SmallTopBottomMargin}"
                HorizontalAlignment="Center"
                SelectedDateFormat="Long"
                IsEnabled="{Binding IsStarting, Converter={StaticResource InverseBooleanConverter}}"
                SelectedDateTime="{Binding StartDate, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, ValidatesOnExceptions=True}" />
            <TextBlock
                Grid.Row="3"
                Grid.Column="0"
                FontWeight="Bold"
                Style="{StaticResource SlideInAnimationStyle}"
                Text="Interval time (in seconds):" />
            <Controls:NumericUpDown
                Grid.Row="3"
                Grid.Column="1"
                Minimum="10"
                Style="{StaticResource CustomNumericUpDownStyle}"
                Value="{Binding IntervalTime, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, ValidatesOnExceptions=True}" />
            <StackPanel
                Grid.Row="4"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                HorizontalAlignment="Center"
                Orientation="Horizontal">
                <Button
                    Margin="10"
                    Command="{Binding CancelCommand}"
                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type simpleChildWindow:ChildWindow}}}"
                    Content="Cancel"
                    Style="{StaticResource MahApps.Styles.Button.Dialogs.Accent}" />
                <Button
                    Margin="10"
                    Command="{Binding StartEmulatorCommand}"
                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type simpleChildWindow:ChildWindow}}}"
                    Content="Start Emulator"
                    IsEnabled="{Binding IsStarting, Converter={StaticResource InverseBooleanConverter}}"
                    Style="{StaticResource MahApps.Styles.Button.Dialogs.Accent}" />
            </StackPanel>

        </Grid>
        <Controls:ProgressRing
            Width="100"
            Height="100"
            Background="Transparent"
            BorderThickness="5"
            Foreground="{StaticResource MahApps.Brushes.Accent}"
            IsActive="{Binding IsStarting}"
            Visibility="{Binding IsStarting, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Controls:ProgressRing.Style>
                <Style TargetType="{x:Type Controls:ProgressRing}">
                    <Style.Triggers>
                        <Trigger Property="IsActive" Value="True">
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Controls:ProgressRing.Style>
        </Controls:ProgressRing>
    </Grid>
</simpleChildWindow:ChildWindow>
